const express = require('express');
const bodyParser = require('body-parser');
const mongoose = require('mongoose');
const passport = require('passport');
const session = require('express-session');
const bcrypt = require('bcrypt');
const User = require('./models/User');  // Assuming a User schema is created
const paymentRouter = require('./routes/payment'); // Separate payment routes

const app = express();
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(session({ secret: 'mySecret', resave: false, saveUninitialized: false }));
app.use(passport.initialize());
app.use(passport.session());

// Passport config
require('./config/passport')(passport);  // Your passport config file

mongoose.connect('mongodb://localhost:27017/myWebsiteDB', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// Registration route
app.post('/register', async (req, res) => {
  const { username, password } = req.body;
  try {
    const hashedPassword = await bcrypt.hash(password, 10);
    const user = new User({ username, password: hashedPassword });
    await user.save();
    res.status(201).send('User created');
  } catch (error) {
    res.status(500).send('Error creating user');
  }
});

// User login route
app.post('/login', passport.authenticate('local', {
  successRedirect: '/profile',
  failureRedirect: '/login',
  failureFlash: true
}));

// Profile route to customize
app.get('/profile', (req, res) => {
  if (req.isAuthenticated()) {
    res.render('profile', { user: req.user });  // Render profile customization page
  } else {
    res.redirect('/login');
  }
});

// Saving user customization (like background, profile image, etc.)
app.post('/profile/save', async (req, res) => {
  const { background, profileImage, bio, socialLinks, audio, cursor } = req.body;
  try {
    await User.findByIdAndUpdate(req.user._id, { background, profileImage, bio, socialLinks, audio, cursor });
    res.send('Profile updated');
  } catch (error) {
    res.status(500).send('Error updating profile');
  }
});

// Route to display user's custom domain page
app.get('/:username', async (req, res) => {
  const user = await User.findOne({ username: req.params.username });
  if (user) {
    res.render('userProfile', { user });  // Render the customized user page
  } else {
    res.status(404).send('User not found');
  }
});

// Premium feature
app.use('/payment', paymentRouter);  // Payment route for premium upgrade

app.listen(3000, () => {
  console.log('Server running on port 3000');
});
